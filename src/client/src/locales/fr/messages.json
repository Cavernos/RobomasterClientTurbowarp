{
    "Armor": {
        "name": "Armure",
        "description": "name of tab",
        "blocks": {
            "setArmorSensitivity": {
                "text": "Definir la sensibilité de l'armure à [sensitivity]",
                "description": "text on block"
            },
            "isArmorHit": {
                "text": "Quand l'armure [armor] est touchée ?",
                "description": "text on block"
            },
            "getLastHitArmor": {
                "text": "[info] sur le dernier impact",
                "description": "text on block"
            },
            "waitUntilArmorHit": {
                "text": "Attendre jusqu'à ce que l'armure [armor] soit touchée ?",
                "description": "text on block"
            },
            "irHit": {
                "text": "Lorsque le robot est touché par un rayon IR",
                "description": "text on block"
            },
            "waitUntilIrHit": {
                "text": "Attendre jusqu'à ce que le robot soit touché par un rayon IR",
                "description": "text on block"
            }
        },
        "menus": {
            "armorPosition": {
                "message": [
                    "aléatoire",
                    "avant",
                    "arrière",
                    "gauche",
                    "droite"
                ],
                "description": "text in menu"
            },
            "armorInfo": {
                "message": ["ID", "temps"],
                "description": "text in menu"
            }
        }
    },
    "Chassis": {
        "name": "Chassis",
        "description": "name of tab",
        "blocks": {
            "moveForward": {
                "text": "Faire translater le chassis à [degree]°",
                "description": "text on block"
            },
            "move": {
                "text": "Avancer de X: [x] m Y: [y] m Z: [z] m à une vitesse de [speed] m/s",
                "description": "text on block"
            },
            "rotate": {
                "text": "Tourner d'un angle de [angle] °",
                "description": "text on block"
            },
            "setPwmValue": {
                "text": "Paramétrer la sortie [pwm] à [value]%",
                "description": "text on block"
            },
            "enableStickOverlay": {
                "text": "[status] de l'accéleration du chassis",
                "description": "text on block"
            },
            "setFollowGimbalOffset": {
                "text": "Suivre la nacelle à [degree]°",
                "description": "text on block"
            },
            "setTransSpeed": {
                "text": "Faire une translation à une vitesse de [speed]m/s",
                "description": "text on block"
            },
            "setRotateSpeed": {
                "text": "Vitesse de rotation [speed]°/s",
                "description": "text on block"
            },
            "setWheelSpeed": {
                "text": "Vitesse de rotation de la roue (rpm) avant gauche [fl] avant droite [fr] arrière gauche [rl] arrière droite [rr]",
                "description": "text on block"
            },
            "moveWithTime": {
                "text": "Faire une translation de [degree]° pendant [time]s",
                "description": "text on block"
            },
            "moveWithDistance": {
                "text": "Faire une translation de [degree]° sur [distance]m",
                "description": "text on block"
            },
            "moveDegreeWithSpeed": {
                "text": "Faire une translation de [degree]° à [speed]m/s",
                "description": "text on block"
            },
            "rotateWithTime": {
                "text": "Tourner à [direction] pendant [time]s",
                "description": "text on block"
            },
            "rotateWithDegree": {
                "text": "Tourner à [direction] de [degree]°",
                "description": "text on block"
            },
            "moveAndRotate": {
                "text": "Suivre le chassis à [degree]° and tourner à  [direction]",
                "description": "text on block"
            },
            "moveWithSpeed": {
                "text": "Avancer à [xspeed]m/s sur l'axe X  et [yspeed] m/s sur l'axe Y et tourner sur l'axe Z à [rotation]°/s",
                "description": "text on block"
            },
            "stop": {
                "text": "Stopper le chassis",
                "description": "text on block"
            },
            "getAttitude": {
                "text": "Attitude du chassis [attitude]",
                "description": "text on block"
            },
            "getPositionBasePowerOn": {
                "text": "Position actuelle du chassis [action]",
                "description": "text on block"
            },
            "chassisImpactDetection": {
                "text": "Quand le chassis touche un obstacle",
                "description": "text on block"
            },
            "isImpact": {
                "text": "Chassis touche un obstacle",
                "description": "text on block"
            }
        },
        "menus": {
            "pwm_port": {
                "message": [
                    "PWP_all",
                    "PWP_1",
                    "PWP_2",
                    "PWP_3",
                    "PWP_4",
                    "PWP_5",
                    "PWP_6"
                ],
                "description": "text in menu"
            },
            "status": {
                "message": ["Activer", "Désactiver"],
                "description": "text in menu"
            },
            "direction": {
                "message": ["gauche", "droite"],
                "description": "text in menu"
            },
            "attitude": {
                "message": ["libre", "terrain", "rouler"],
                "description": "text in menu"
            },
            "action": {
                "message": ["orientation", "X", "Y", "Z"],
                "description": "text in menu"
            }
        }
    },
    "ExtensionModule": {
        "name": "ModuleExtension",
        "description": "name of tab",
        "blocks": {
            "arm": {
                "text": "Deplacer le bras vers le [position]",
                "description": "text on block"
            },
            "grabber": {
                "text": "[action] la pince",
                "description": "text on block"
            },
            "setGripper": {
                "text": "[action] la pince",
                "description": "text on block"
            },
            "armMove": {
                "text": "Bouger le bras en [direction] de [distance]mm",
                "description": "text on block"
            },
            "armMoveTo": {
                "text": "Bouger le bras aux coordonnées (X:[x] Y:[y])",
                "description": "text on block"
            }
        },
        "menus": {
            "gripperActions": {
                "message": ["ouvrir", "fermer", "stopper"],
                "description": "text in menu"
            },
            "armPositions": {
                "message": ["monter", "descendre"],
                "description": "text in menu"
            },
            "armDirection": {
                "message": ["avant", "arrière", "haut", "bas"],
                "description": "text in menu"
            }
        }
    },
    "LedEffects": {
        "name": "EffetsDeLeds",
        "description": "name of tab",
        "blocks": {
            "setFlash": {
                "text": "Paramétrer la fréquence  des leds [led] à [frequency]Hz",
                "description": "text on block"
            },
            "setBottomLed": {
                "text": "Paramétrer la couleur des leds [led] à [color] et l'effet à [effect]",
                "description": "text on block"
            },
            "setTopLed": {
                "text": "Couleur des leds de la nacelle [led] à [color] l'effet à [effect]",
                "description": "text on block"
            },
            "setSignleLed": {
                "text": "Sequence des leds [led] à [index] et l'effet à [effect]",
                "description": "text on block"
            },
            "turnOff": {
                "text": "Placer les leds [led] à la couleur [color]",
                "description": "text on block"
            }
        },
        "menus": {
            "armorFlash": {
                "message": [
                    "toutes",
                    "avant bas",
                    "arrière bas",
                    "gauche bas",
                    "droite bas",
                    "haut gauche",
                    "haut droit"
                ],
                "description": "text in menu"
            },
            "armorBottomLed": {
                "message": [
                    "basses toutes",
                    "bas avant",
                    "bas arrières",
                    "bas gauche",
                    "bas droite"
                ],
                "description": "text in menu"
            },
            "armorTopLed": {
                "message": ["haut toutes", "haut gauche", "haut droite"],
                "description": "text in menu"
            },
            "color": {
                "message": [
                    "rouge",
                    "vert",
                    "bleu",
                    "jaune",
                    "cyan",
                    "violet",
                    "blanc"
                ],
                "description": "text in menu"
            },
            "effect": {
                "message": ["solide", "danse", "flash", "off"],
                "description": "text in menu"
            }
        }
    },
    "Media": {
        "name": "Media",
        "description": "name of tab",
        "blocks": {
            "say": {
                "text": "Dire [say]",
                "description": "text on block"
            },
            "playNote": {
                "text": "Jouer la note [note]",
                "description": "text on block"
            },
            "playSoundEffect": {
                "text": "Jouer l'effet sonore [effect]",
                "description": "text on block"
            },
            "playSoundEffectUntilDone": {
                "text": "Jouer l'effet sonore [effect] jusqu'à la fin",
                "description": "text on block"
            },
            "playCustomAudio": {
                "text": "Jouer l'audio customisé [audio]",
                "description": "text on block"
            },
            "playCustomAudioUntilDone": {
                "text": "Jouer l'audio customisé [audio] jusqu'à la fin",
                "description": "text on block"
            },
            "takePhoto": {
                "text": "Prendre une photo",
                "description": "text on block"
            },
            "startVideoRecording": {
                "text": "[action] l'enregistrement audio",
                "description": "text on block"
            }
        },
        "menus": {
            "notes": {
                "message": [
                    "1C",
                    "1D",
                    "1E",
                    "1F",
                    "1G",
                    "1A",
                    "1B",
                    "2C",
                    "2D",
                    "2E",
                    "2F",
                    "2G",
                    "2A",
                    "2B",
                    "3C",
                    "3D",
                    "3E",
                    "3F",
                    "3G",
                    "3A",
                    "3B"
                ],
                "description": "text in menu"
            },
            "soundEffects": {
                "message": ["impact", "hit", "explosion", "alert"],
                "description": "text in menu"
            },
            "recordingActions": {
                "message": ["démarer", "stoppers"],
                "description": "text in menu"
            }
        }
    },
    "RobomasterBasics": {
        "name": "RobomasterBases",
        "description": "name of tab",
        "blocks": {
            "start": {
                "text": "Connection au robot [sn]",
                "description": "text on block"
            },
            "stop": {
                "text": "Deconnexion",
                "description": "text on block"
            }
        },
        "menus": {
            "sn": {
                "message": [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16"
                ],
                "description": "text in menu"
            }
        }
    },
    "Sensor": {
        "name": "Capteur",
        "description": "name of tab",
        "blocks": {
            "setInfraredSensor": {
                "text": "Capteur de distance IR [status] fonction de mesure [sensor]",
                "description": "text on block"
            },
            "whenInfraredDistance": {
                "text": "Quand le capteur IR [sensor] est à une distance [operator] [value] cm",
                "description": "text on block"
            },
            "waitUntilInfraredDistance": {
                "text": "Attendre jusque la distance [operator] [value] cm avec le capteur IR [sensor]",
                "description": "text on block"
            },
            "isInfraredDistance": {
                "text": "Distance [operator] [value] cm depuis le capteur IR [sensor]",
                "description": "text on block"
            },
            "getInfraredDistance": {
                "text": "Récupérer la distance du capteur [sensor]",
                "description": "text on block"
            }
        },
        "menus": {
            "sensorStatus": {
                "message": ["activer", "désactiver"],
                "description": "text in menu"
            },
            "operators": {
                "message": [">=", "<=", "="],
                "description": "text in menu"
            }
        }
    },
    "SensorAdapter": {
        "name": "CapteurAdapteur",
        "description": "name of tab",
        "blocks": {},
        "menus": {}
    },
    "Smart": {
        "name": "Intelligence",
        "description": "name of tab",
        "blocks": {
            "setClapsDetection": {
                "text": "[status] la détection d'applaudissement",
                "description": "text on block"
            },
            "setExposureValue": {
                "text": "Définir la valeur d'exposition à [exposure]",
                "description": "text on block"
            },
            "whenRobotIdentifies": {
                "text": "Quand [target] est identifié",
                "description": "text on block"
            },
            "whenRobotIdentifiesClaps": {
                "text": "Quand le robot identifies [claps]",
                "description": "text on block"
            },
            "enableIdentification": {
                "text": "[action] l'identification de [feature]",
                "description": "text on block"
            },
            "setMarkerIdentificationDistance": {
                "text": "Définir la distance d'identification des marqueurs visuels à [distance] m",
                "description": "text on block"
            },
            "setMarkerColor": {
                "text": "Définir à [color] la couleur d'identification des marqueur visuels",
                "description": "text on block"
            },
            "setLineColor": {
                "text": "Définir à [color] la couleur d'identification des lignes",
                "description": "text on block"
            },
            "getMarkerInfo": {
                "text": "Informations sur le marqueur visuel identifié",
                "description": "text on block"
            },
            "getPersonInfo": {
                "text": "Informations sur le/la [target] identifié(e)",
                "description": "text on block"
            },
            "getGestureInfo": {
                "text": "Informations sur le geste identifié",
                "description": "text on block"
            },
            "getLineInfo": {
                "text": "Informations sur la ligne identifiée",
                "description": "text on block"
            },
            "getLinesInfo": {
                "text": "Informations sur les lignes identifiées",
                "description": "text on block"
            },
            "getCurrentBrightness": {
                "text": "Récupérer la luminosité actuelle",
                "description": "text on block"
            },
            "waitUntilIdentifies": {
                "text": "Attendre jusqu'à l'identification d'un/une [target]",
                "description": "text on block"
            },
            "waitUntilClaps": {
                "text": "Attendre jusque l'identification de [claps]",
                "description": "text on block"
            }
        },
        "menus": {
            "exposureValues": {
                "message": ["élevé", "moyenne", "basse"],
                "description": "text in menu"
            },
            "targetTypes": {
                "message": ["coeur rouge", "cercle bleu", "triangle vert"],
                "description": "text in menu"
            },
            "identificationTargets": {
                "message": ["personnes", "marqueur visuel", "gestes"],
                "description": "text in menu"
            },
            "clapTypes": {
                "message": [
                    "1 applaudissement",
                    "2 applaudissements",
                    "3 applaudissements"
                ],
                "description": "text in menu"
            },
            "actionTypes": {
                "message": ["activer", "désactiver"],
                "description": "text in menu"
            },
            "featureTypes": {
                "message": ["marqueur visuel", "lignes", "applaudissements"],
                "description": "text in menu"
            },
            "markerColors": {
                "message": ["rouge", "vert", "bleu", "jaune"],
                "description": "text in menu"
            },
            "lineColors": {
                "message": ["bleu", "rouge", "vert", "jaune"],
                "description": "text in menu"
            },
            "personTypes": {
                "message": ["personnes", "Robot S1"],
                "description": "text in menu"
            },
            "waitTargets": {
                "message": ["personnes", "marqueurs visuels", "gestes"],
                "description": "text in menu"
            }
        }
    }
}
